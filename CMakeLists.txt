# root CMakeLists.txt, generated by dswlist.pl, on 2012/06/06 18:33:40
# 20120620 - but later HAND MODIFIED
cmake_minimum_required( VERSION 2.6 )

project( fgcom )

# The version number.
# read 'version' file into a variable (stripping any newlines or spaces)
file(READ version versionFile)
string(STRIP ${versionFile} FGCOM_VERSION)
file(WRITE ${PROJECT_BINARY_DIR}/version.h "#define FGCOM_VERSION \"${FGCOM_VERSION}\"")

# We have some custom .cmake scripts not in the official distribution.
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")

# Allow developer to select is Dynamic or static library built, BUT not good here!
set( LIB_TYPE STATIC )  # set default static
option( BUILD_SHARED_LIB "Build Shared Library" OFF )

# Options offered in Makefile
# For Linux, you can choose between portaudio with OSS, Alsa and Jack backend, and native Alsa Choice is inclusive
# AUDIO_ALSA=0 is also #ifdef AUDIO_ALSA, adds audio_alsa.c, so do not define it unless using it
# CODEC_ILBC=0 in Makefile, is an #ifdef CODEX_ILBC, but no code in source, so no define at all
# exclude - iaxclient/lib/codec_ilbc.c - contains #include "iLBC/iLBC_encode.h" NOT in source
# USE_VIDEO=0 in Makefile, if ON sets IAXC_VIDEO, adds OBJS_VIDEO, needs -lavcodex -ltheora, defult OFF
# USE_PA_OSS=0 in Makefile, adds PA_USE_ALSA and code pa_linux_alsa.c
# SPAN_EC=0 in Makefile, add SPAN_EC, adds ec/echo.c, is #ifdef in iaxclient/lib/audio_portaudio.c
# SPEEX_EC also #ifdef, but appears ON in APPLE
# MEC2_EC in Makefile, sets USE_MEC2, in audio_portaudio.c, default off
# USE_NEWJB=1 in Makefile, defines NEWJB, so
# USE_PA_ALSA=0 in Makefile, defines PA_USE_ALSA, default off
# USE_PA_JACK=0 in Makefile, defines PA_USE_JACK, default off
# USE_NEWJB=1 in Makefile, defines NEWJB, in source iaxclient/lib/libiax2/src/iax.c
option( CODEC_ILBC  "Use ILBC codec. Need to add support code. Default OFF." OFF )
option( SPEEX_PREPROCESS "Use SPEEX_PREPROCESS. Defaults ON." ON )
option( SPAN_EC "Use SPAN_EC. Defaults OFF." OFF )
option( SPEEX_EC "Use SPEEX_EC. Default ON." ON )
option( MEC2_EC "Use MEC2_EC. Default OFF." OFF )
option( USE_NEWJB "Use NEWJB. Default ON." ON )
option( USE_VIDEO "Use VIDEAO. Default OFF." OFF )
# For Linux, you can choose between portaudio with OSS, Alsa and Jack backend, and native Alsa Choice is inclusive
option( USE_PA_OSS "Use PA_OSS. Default OFF." OFF )
option( USE_PA_ALSA "Use PA_ALSA. Default OFF." OFF )
option( USE_PA_JACK "Use PA_JACK. Default OFF." OFF )
# found 'common' FAILED in linux, so default this OFF
option( USE_PORTAUDIO "Use common PORTAUDIO if NOT OSS, ALSA OR JACK. Default OFF." OFF )
option( AUDIO_ALSA "Use AUDIO_ALSA. Default OFF." OFF )
option( AUDIO_OPENAL "Use AUDIO OpenAL (and ALUT). Default ON." ON )
option( USE_OPENAL_SDK "Use installed OpenAL SDK. Default ON." ON )

set( WARNING_FLAGS "" ) # clear warning flags
set( EXTRA_FLAGS "" )

# Need to check source list - from the Makefile, but NOT yet used
set(OBJS
    iaxclient/lib/spandsp/plc.c
    iaxclient/lib/audio_encode.c
    iaxclient/lib/audio_file.c
    iaxclient/lib/codec_gsm.c
    iaxclient/lib/codec_ulaw.c
    iaxclient/lib/codec_alaw.c
    iaxclient/lib/codec_speex.c
    iaxclient/lib/iaxclient_lib.c )

set(OBJS_OPENAL
    iaxclient/lib/audio_openal.c )

set(OBJS_PA
    iaxclient/lib/audio_portaudio.c
    iaxclient/lib/portaudio/src/common/pa_allocation.c
    iaxclient/lib/portaudio/src/common/pa_converters.c
    iaxclient/lib/portaudio/src/common/pa_cpuload.c
    iaxclient/lib/portaudio/src/common/pa_dither.c
    iaxclient/lib/portaudio/src/common/pa_front.c
    iaxclient/lib/portaudio/src/common/pa_process.c
    iaxclient/lib/portaudio/src/common/pa_skeleton.c
    iaxclient/lib/portaudio/src/common/pa_stream.c
    iaxclient/lib/portaudio/src/common/pa_trace.c )

set(OBJS_GSM
    iaxclient/lib/gsm/src/add.c
    iaxclient/lib/gsm/src/code.c
    iaxclient/lib/gsm/src/debug.c
    iaxclient/lib/gsm/src/decode.c
    iaxclient/lib/gsm/src/gsm_create.c
    iaxclient/lib/gsm/src/gsm_decode.c
    iaxclient/lib/gsm/src/gsm_destroy.c
    iaxclient/lib/gsm/src/gsm_encode.c
    iaxclient/lib/gsm/src/gsm_explode.c
    iaxclient/lib/gsm/src/gsm_implode.c
    iaxclient/lib/gsm/src/gsm_option.c
    iaxclient/lib/gsm/src/gsm_print.c
    iaxclient/lib/gsm/src/long_term.c
    iaxclient/lib/gsm/src/lpc.c
    iaxclient/lib/gsm/src/preprocess.c
    iaxclient/lib/gsm/src/rpe.c
    iaxclient/lib/gsm/src/short_term.c
    iaxclient/lib/gsm/src/table.c )

set(OBJS_LIBSPEEX
    iaxclient/lib/libspeex/nb_celp.c
    iaxclient/lib/libspeex/sb_celp.c
    iaxclient/lib/libspeex/lpc.c
    iaxclient/lib/libspeex/ltp.c
    iaxclient/lib/libspeex/lsp.c
    iaxclient/lib/libspeex/quant_lsp.c
    iaxclient/lib/libspeex/lsp_tables_nb.c
    iaxclient/lib/libspeex/gain_table.c
    iaxclient/lib/libspeex/gain_table_lbr.c
    iaxclient/lib/libspeex/cb_search.c
    iaxclient/lib/libspeex/filters.c
    iaxclient/lib/libspeex/bits.c
    iaxclient/lib/libspeex/modes.c
    iaxclient/lib/libspeex/speex.c
    iaxclient/lib/libspeex/vq.c
    iaxclient/lib/libspeex/high_lsp_tables.c
    iaxclient/lib/libspeex/vbr.c
    iaxclient/lib/libspeex/hexc_table.c
    iaxclient/lib/libspeex/exc_5_256_table.c
    iaxclient/lib/libspeex/exc_5_64_table.c
    iaxclient/lib/libspeex/exc_8_128_table.c
    iaxclient/lib/libspeex/exc_10_32_table.c
    iaxclient/lib/libspeex/exc_10_16_table.c
    iaxclient/lib/libspeex/exc_20_32_table.c
    iaxclient/lib/libspeex/hexc_10_32_table.c
    iaxclient/lib/libspeex/misc.c
    iaxclient/lib/libspeex/speex_header.c
    iaxclient/lib/libspeex/speex_callbacks.c
    iaxclient/lib/libspeex/math_approx.c
    iaxclient/lib/libspeex/stereo.c
    iaxclient/lib/libspeex/preprocess.c
    iaxclient/lib/libspeex/smallft.c
    iaxclient/lib/libspeex/lbr_48k_tables.c
    iaxclient/lib/libspeex/jitter.c
    iaxclient/lib/libspeex/mdf.c )

set(OBJS_ILBC
    iaxclient/lib/iLBC/anaFilter.c
    iaxclient/lib/iLBC/iCBSearch.c
    iaxclient/lib/iLBC/packing.c
    iaxclient/lib/iLBC/constants.c
    iaxclient/lib/iLBC/gainquant.c
    iaxclient/lib/iLBC/iLBC_decode.c
    iaxclient/lib/iLBC/StateConstructW.c
    iaxclient/lib/iLBC/createCB.c
    iaxclient/lib/iLBC/getCBvec.c
    iaxclient/lib/iLBC/iLBC_encode.c
    iaxclient/lib/iLBC/StateSearchW.c
    iaxclient/lib/iLBC/doCPLC.c
    iaxclient/lib/iLBC/helpfun.c
    iaxclient/lib/iLBC/syntFilter.c
    iaxclient/lib/iLBC/enhancer.c
    iaxclient/lib/iLBC/hpInput.c
    iaxclient/lib/iLBC/LPCdecode.c
    iaxclient/lib/iLBC/filter.c
    iaxclient/lib/iLBC/hpOutput.c
    iaxclient/lib/iLBC/LPCencode.c
    iaxclient/lib/iLBC/FrameClassify.c
    iaxclient/lib/iLBC/iCBConstruct.c
    iaxclient/lib/iLBC/lsf.c )

set(OBJS_VIDEO
    iaxclient/lib/video.c
    iaxclient/lib/video_portvideo.c
    iaxclient/lib/PortVideoSDL/common/cameraTool.c
    iaxclient/lib/PortVideoSDL/common/RingBuffer.c
    iaxclient/lib/PortVideoSDL/common/FrameInverter.c
    iaxclient/lib/codec_theora.c )

set(OBJS ${OBJS} ${OBJS_GSM} ${OBJS_LIBSPEEX} ) 

if(CODEC_ILBC)
   list(APPEND OBJS ${OBJS_ILBC} iaxclient/lib/codec_ilbc.c )
   list(APPEND EXTRA_FLAGS -DCODEC_ILBC )
endif(CODEC_ILBC)

# 20120614 - appears these sources no longer compile, but do NOT seem required
#    iaxclient/lib/portmixer/px_win_wmme/px_win_wmme.c
#    iaxclient/lib/portaudio/src/hostapi/wmme/pa_win_wmme.c
set(OBJS_WIN32
    iaxclient/lib/winfuncs.c
    iaxclient/lib/portaudio/src/os/win/pa_win_hostapis.c
    iaxclient/lib/portaudio/src/os/win/pa_win_util.c
    iaxclient/lib/portaudio/pablio/ringbuffer.c )

set(OBJS_LINUX
    iaxclient/lib/unixfuncs.c )

set(OBJS_SOLARIS
    iaxclient/lib/unixfuncs.c
    iaxclient/lib/portmixer/px_solaris/px_solaris.c
    iaxclient/lib/portaudio/pa_unix_oss/pa_unix_solaris.c
    iaxclient/lib/portaudio/pa_unix_oss/pa_unix.c )

set(OBJS_MACOSX
    iaxclient/lib/unixfuncs.c
    iaxclient/lib/portmixer/px_mac_core/px_mac_core.c
    iaxclient/lib/portaudio/src/hostapi/coreaudio/pa_mac_core.c
    iaxclient/lib/portaudio/src/hostapi/coreaudio/pa_mac_core_utilities.c
    iaxclient/lib/portaudio/src/hostapi/coreaudio/pa_mac_core_blocking.c
    iaxclient/lib/portaudio/src/os/unix/pa_unix_util.c
    iaxclient/lib/portaudio/src/os/mac_osx/pa_mac_hostapis.c
    iaxclient/lib/portaudio/src/hostapi/coreaudio/ringbuffer.c )

set(OBJS_IAX2
    iaxclient/lib/libiax2/src/md5.c
    iaxclient/lib/libiax2/src/iax.c
    iaxclient/lib/libiax2/src/iax2-parser.c
    iaxclient/lib/libiax2/src/jitterbuf.c )

# see http://www.openguru.com/2009/04/cmake-detecting-platformoperating.html - April 13, 2009
# if(MINGW) # where does this fit
# if(WIN32 AND ("$ENV{OSTYPE}" STREQUAL "msys")) # and this?
# or if(MSYS), if(BORLAND), if(WATCOM), if(CYGWIN) to be handled
if(UNIX)
  if(APPLE)
    if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
      set(GUI "Mac OS X")
    else(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
      set(GUI "Mac OS Other")
    endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(OSTYPE "MACOSX")
  else(APPLE)
    set(GUI "X11")
    set(OSTYPE "LINUX")
  endif(APPLE)
else(UNIX)
  if(WIN32)
    set(OSTYPE "WIN32")
    set(GUI "Windows")
  else(WIN32)
    set(GUI "Unknown")
    set(OSTYPE "LINUX")
  endif(WIN32)
endif(UNIX)
message(STATUS "*** GUI system is ${GUI}, cpu ${CMAKE_SYSTEM_PROCESSOR} OSTYPE=${OSTYPE}")

if(WIN32)
# to distinguish between debug and release lib
set( CMAKE_DEBUG_POSTFIX d )
### set( boost_DIR c:/fg/16/boost_1_44_0 )
endif(WIN32)

if(CMAKE_COMPILER_IS_GNUCXX)
    # Makefile adds  -Wmissing-noreturn, but WHY!
    set( WARNING_FLAGS "-Wall")
    message(STATUS "*** Compiler is CMAKE_COMPILER_IS_GNUCXX" )
endif(CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
   message(STATUS "*** Compiler is CMAKE_CXX_COMPILER_ID=Clang" )
endif() 

if(WIN32)
    if(MSVC)
        # turn off various warnings
        set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
        # foreach(warning 4244 4251 4267 4275 4290 4786 4305)
        foreach(warning 4244 4305 4018 4101)
             set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
        endforeach(warning)

        set( EXTRA_FLAGS "-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS" )
        # if (${MSVC_VERSION} EQUAL 1600)
        #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
        # endif (${MSVC_VERSION} EQUAL 1600)
    endif(MSVC)
    set( NOMINMAX 1 )
else(WIN32)
    set( EXTRA_FLAGS "--std=c99" )
endif(WIN32)

if(WIN32)
add_definitions( -DHAVE_CONFIG_H )
endif(WIN32)

if(SPEEX_PREPROCESS)
# list(APPEND EXTRA_FLAGS "-DSPEEX_PREPROCESS=1"
add_definitions( -DSPEEX_PREPROCESS=1 )
endif(SPEEX_PREPROCESS)

if(USE_NEWJB)
# list(APPEND EXTRA_FLAGS "-DNEWJB" )
add_definitions( -DNEWJB )
endif(USE_NEWJB)

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${EXTRA_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${EXTRA_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

# disable OSG dependencies
### add_definitions( -DNO_OPENSCENEGRAPH_INTERFACE )

add_definitions( -DSVN_REV="261" )
add_definitions( -DLIBVER="SVN 261" )

# for now follow like in OSX, in fgcom-data in the 'install' directory
add_definitions( -DSPECIAL_FREQUENCIES_FILE="fgcom-data/special_frequencies.txt" )
add_definitions( -DDEFAULT_POSITIONS_FILE="fgcom-data/positions.txt" )

# set minimum INCLUDE set
set( iax_INCDIRS iaxclient/lib iaxclient/lib/gsm/inc
   iaxclient/lib/libiax2/src
   iaxclient/lib/libspeex/include )


if(BUILD_SHARED_LIB)
   set(LIB_TYPE SHARED)
   message(STATUS "*** Building DLL library ${LIB_TYPE}")
else(BUILD_SHARED_LIB)
   message(STATUS "*** Building static library ${LIB_TYPE}")
endif(BUILD_SHARED_LIB)

if(WIN32)
    set( OBJS ${OBJS} ${OBJS_WIN32} )
    set( win_LIBS Ws2_32.lib Winmm.lib )
    # CFLAGS:= -mno-cygwin -DPA_NO_DS -DPA_NO_ASIO $(CFLAGS)
    # DYNLDFLAGS= -mno-cygwin -lwinmm -lwsock32 -lcomdlg32 -luser32 -lgdi32 -lole32 -lcomctl32 -lctl3d32 \
    #   -lstdc++ -lshell32 -loleaut32 -ladvapi32 -luuid -Wl,--output-def,iaxclient.def,--add-stdcall-alias,--enable-stdcall-fixup,--out-implib,libiaxclient.a
    # Build ONLY static library to link with fgcom
    # DYNCFLAGS=-DBUILDING_DLL
    # DYNLIB=iaxclient.dll
    # need to add to the INCLUDE directories
    set( iax_INCDIRS ${iax_INCDIRS}
       iaxclient/lib/wince
       iaxclient/lib/portaudio/include
       iaxclient/lib/portaudio/src/common
       iaxclient/lib/portmixer/px_common )
else(WIN32)
    if(APPLE)
        set( OBJS ${OBJS} ${OBJS_MACOSX} )
		list(APPEND iax_INCDIRS
			iaxclient/lib/portaudio/src/hostapi/coreaudio
			iaxclient/lib/portmixer/px_common
			iaxclient/lib/portaudio/src/common
			iaxclient/lib/portaudio/include
			# include plib headers from macports
			/opt/local/include
			# include plib headers from plib default osx install
			/usr/include )
        # RANLIB= ranlib
        # comment these lines in to build against version  10.2.7.
        #CC=MACOSX_DEPLOYMENT_TARGET=10.2 NEXT_ROOT=/Developer/SDKs/MacOSX10.2.7.sdk cc
        # CFLAGS:= $(CFLAGS) -DPA_USE_COREAUDIO=1 -Iportaudio/src/hostapi/coreaudio -Iportmixer/px_common -Iportaudio/src/common -Iportaudio/include
        #architecture
        # CC=NEXT_ROOT=/Developer/SDKs/MacOSX10.4u.sdk/ gcc -arch i386 -arch ppc
        #CFLAGS:= $(CFLAGS) -isystem /Developer/SDKs/MacOSX10.2.7.sdk/usr/include
        # Build Universal Binaries on MacOSX
        # CC=NEXT_ROOT=/Developer/SDKs/MacOSX10.4u.sdk/ MACOSX_DEPLOYMENT_TARGET=10.4 gcc -arch i386 -arch ppc
        # DYNLIB=libiaxclient.dylib
    else(APPLE)
        if(UNIX)
            # CFLAGS:= $(CFLAGS) -Iportaudio/src/os/unix
            # DYNCFLAGS=-fPIC
            # DYNLIB=libiaxclient.so
            if(USE_PA_OSS)
                set( OBJS_LINUX ${OBJS_LINUX} iaxclient/lib/portaudio/src/hostapi/oss/pa_unix_oss.c )
                # CFLAGS:= $(CFLAGS) -DPA_USE_OSS
                add_definitions( "-DPA_USE_OSS" )
            endif(USE_PA_OSS)

            if(USE_PA_ALSA)
                set( OBJS_LINUX ${OBJS_LINUX} iaxclient/lib/portaudio/src/hostapi/alsa/pa_linux_alsa.c )
                # CFLAGS:= $(CFLAGS) -DPA_USE_ALSA
                add_definitions( "-DPA_USE_ALSA" )
            endif(USE_PA_ALSA)

            if(USE_PA_JACK)
                set( OBJS_LINUX ${OBJS_LINUX} iaxclient/lib/portaudio/src/hostapi/jack/pa_jack.c )
                # CFLAGS:= $(CFLAGS) -DPA_USE_JACK
                add_definitions( "-DPA_USE_JACK" )
            endif(USE_PA_JACK)

            if(USE_PORTAUDIO AND NOT (USE_PA_OSS OR USE_PA_ALSA OR USE_PA_JACK))
                set( OBJS_LINUX ${OBJS_LINUX} 
                    iaxclient/lib/portmixer/px_unix_oss/px_unix_oss.c
                    iaxclient/lib/portaudio/src/os/unix/pa_unix_util.c
                    iaxclient/lib/portaudio/src/os/unix/pa_unix_hostapis.c )
            endif(USE_PORTAUDIO AND NOT (USE_PA_OSS OR USE_PA_ALSA OR USE_PA_JACK))

            set( OBJS_LINUX ${OBJS_LINUX} iaxclient/lib/portaudio/pablio/ringbuffer.c )
            set( OBJS ${OBJS} ${OBJS_LINUX} ) 
        endif(UNIX) # and linux
    endif(APPLE)
endif(WIN32)

if(USE_VIDEO)
    # THIS HAS NOT BEEN TESTED - may need adjustments
    set( OBJS ${OBJS} ${OBJS_VIDEO} )
    # CFLAGS:= $(CFLAGS) -DIAXC_VIDEO
    # LIBS:= $(LIBS) -lavcodec -ltheora
    if(WIN32)
        # CFLAGS:= $(CFLAGS) -IPortVideoSDL/win32/dslib/include -Ic:/DX90SDK/include-gcc -Ic:/DX90SDK/Samples/C++/DirectShow/BaseClasses
        set( OBJS ${OBJS} PortVideoSDL/win32/dslibCamera.cpp )
    else(WIN32)
        if(APPLE)
            # CFLAGS:= $(CFLAGS) -I../../theora/include -I/sw/include
            set( OBJS ${OBJS} PortVideoSDL/macosx/macvdCamera.c PortVideoSDL/macosx/vdigGrab.c )
        else(APPLE)
            if(UNIX)
                set( OBJS ${OBJS} PortVideoSDL/linux/linuxfwCamera.c PortVideoSDL/linux/v4linuxCamera.c )
            endif(UNIX)
        endif(APPLE)
    endif(WIN32)
endif(USE_VIDEO)

if(AUDIO_ALSA)
    set( OBJS ${OBJS} iaxclient/lib/audio_alsa.c )
    # CFLAGS:= $(CFLAGS) -DAUDIO_ALSA
    add_definitions( "-DAUDIO_ALSA" )
endif(AUDIO_ALSA)

if(USE_PORTAUDIO AND NOT (USE_PA_OSS OR USE_PA_ALSA OR USE_PA_JACK))
    set( OBJS ${OBJS} ${OBJS_PA} )
    # CFLAGS:= $(CFLAGS) -DAUDIO_PA -Iportaudio/include -Iportaudio/src/common -Iportaudio/pablio -Iportmixer/px_common
    set( iax_INCDIRS ${iax_INCDIRS}
        iaxclient/lib/portaudio/include
        iaxclient/lib/portmixer/px_common 
        iaxclient/lib/portaudio/src/common 
        iaxclient/lib/portaudio/pablio )
    add_definitions( "-DAUDIO_PA" )
endif(USE_PORTAUDIO AND NOT (USE_PA_OSS OR USE_PA_ALSA OR USE_PA_JACK))

if(AUDIO_OPENAL)
    set( OBJS ${OBJS} ${OBJS_OPENAL} )
    # CFLAGS:= $(CFLAGS) -DAUDIO_OPENAL
    add_definitions( "-DAUDIO_OPENAL" )
    if(USE_OPENAL_SDK)
        add_definitions( "-DOPENALSDK" )
    endif(USE_OPENAL_SDK)
endif(AUDIO_OPENAL)

set( OBJS ${OBJS} ${OBJS_IAX2} )
#CFLAGS:= $(CFLAGS) -Ilibiax2/src -DIAXC_IAX2 -DLIBIAX -DDEBUG_SUPPORT 
# CFLAGS:= $(CFLAGS) -Ilibiax2/src -DLIBIAX 
# should ONLY be for the library, but seems to do no harm
add_definitions( -DLIBIAX )

if(SPAN_EC)
    set(OBJS ${OBJS} iaxclient/lib/ec/echo.c)
    #CFLAGS:= $(CFLAGS) -DSPAN_EC=1
    add_definitions( "-DSPAN_EC=1" )
endif(SPAN_EC)

if(SPEEX_EC)
    #CFLAGS:= $(CFLAGS) -DSPEEX_EC=1
    add_definitions( "-DSPEEX_EC=1" )
endif(SPEEX_EC)

if(MEC2_EC)
    #CFLAGS:= $(CFLAGS) -DUSE_MEC2=1
    add_definitions( "-DUSE_MEC2=1" )
endif(MEC2_EC)

# CFLAGS:= $(CFLAGS) -D$(OSTYPE)
add_definitions( "-D${OSTYPE}" )

# renamed iaxclient/lib/gsm/inc/config.h to gsm_config.h - not used
# do NOT really need headers, BUT they are good for the MSVC IDE
set( iaxclient_lib_HEADERS iaxclient/lib/audio_encode.h iaxclient/lib/audio_file.h iaxclient/lib/audio_portaudio.h 
   iaxclient/lib/codec_alaw.h iaxclient/lib/codec_gsm.h iaxclient/lib/codec_speex.h iaxclient/lib/codec_ulaw.h 
   iaxclient/lib/gsm/inc/gsm.h iaxclient/lib/gsm/inc/private.h 
   iaxclient/lib/gsm/inc/proto.h iaxclient/lib/gsm/inc/unproto.h iaxclient/lib/gsm/src/k6opt.h 
   iaxclient/lib/iaxclient.h iaxclient/lib/iaxclient_lib.h iaxclient/lib/libiax2/src/iax.h 
   iaxclient/lib/libiax2/src/iax2-parser.h iaxclient/lib/libiax2/src/iax2.h iaxclient/lib/libiax2/src/jitterbuf.h 
   iaxclient/lib/libiax2/src/md5.h iaxclient/lib/libspeex/arch.h iaxclient/lib/libspeex/cb_search.h 
   iaxclient/lib/libspeex/cb_search_sse.h iaxclient/lib/libspeex/filters.h iaxclient/lib/libspeex/filters_sse.h 
   iaxclient/lib/libspeex/fixed_debug.h iaxclient/lib/libspeex/fixed_generic.h iaxclient/lib/libspeex/lpc.h 
   iaxclient/lib/libspeex/lsp.h iaxclient/lib/libspeex/ltp.h iaxclient/lib/libspeex/ltp_sse.h 
   iaxclient/lib/libspeex/math_approx.h iaxclient/lib/libspeex/medfilter.h iaxclient/lib/libspeex/misc.h 
   iaxclient/lib/libspeex/modes.h iaxclient/lib/libspeex/nb_celp.h iaxclient/lib/libspeex/quant_lsp.h 
   iaxclient/lib/libspeex/sb_celp.h iaxclient/lib/libspeex/smallft.h iaxclient/lib/libspeex/stack_alloc.h 
   iaxclient/lib/libspeex/vbr.h iaxclient/lib/libspeex/vq.h iaxclient/lib/sox/sox.h iaxclient/lib/spandsp/plc.h )

# UGH - includes some simgear, which then requires boost - removed SG and boost
include_directories( SYSTEM "${PROJECT_BINARY_DIR}" src ${iax_INCDIRS} ${CMAKE_PREFIX_PATH} ${M3RDPARTY_INCS} )

# always includes ul - will seek "d" or "_d"
find_package(PLIB   REQUIRED net)
### find_package(SG     REQUIRED sgdebug sgmisc)
find_package(ZLIB   REQUIRED)
if(AUDIO_OPENAL)
find_package(ALUT   REQUIRED)
find_package(OpenAL REQUIRED)
message(STATUS "*** OpenAL OPENAL_INCLUDE_DIR=${OPENAL_INCLUDE_DIR}")
message(STATUS "*** OpenAL OPENAL_LIBRARY=${OPENAL_LIBRARY}")
include_directories( SYSTEM "${OPENAL_INCLUDE_DIR}" )
endif(AUDIO_OPENAL)

# I think the 'OBJS' has been set exactly per the Makefile now - of course 'sources' NOT 'objects'
add_library( iaxclient_lib ${LIB_TYPE} ${OBJS} ${iaxclient_lib_HEADERS} )

if(BUILD_SHARED_LIB)
   target_link_libraries( iaxclient_lib ${win_LIBS} )
endif(BUILD_SHARED_LIB)

# NO INSTALL OF THIS STATIC LIBRARY
# deal with install 
# install( TARGETS iaxclient_lib
#         RUNTIME DESTINATION bin
#         LIBRARY DESTINATION lib
#         ARCHIVE DESTINATION lib )
# install(FILES ${iaxclient_lib_HEADERS} DESTINATION include )
# If a SHARED library, may need to add library dependence
# target_link_libraries( iaxclient_lib ${some_lib_LIST} )

# Project fgcom, type Console Application
# Adding 5 of 5 sources (4 of 4 hdrs)
set( fgcom_SOURCES src/fgcom.cpp src/fgcom_init.cpp src/position.cpp src/utils.cpp )

set( fgcom_HEADERS src/fgcom.h src/fgcom_init.h src/position.h src/utils.h )
if(WIN32)
    list(APPEND fgcom_SOURCES src/fgcom_getopt.c)
    list(APPEND fgcom_HEADERS src/fgcom_getopt.h)
endif(WIN32)

add_executable( fgcom ${fgcom_SOURCES} ${fgcom_HEADERS} )

set_target_properties( fgcom PROPERTIES DEBUG_POSTFIX d )

# Now excluded ${SG_LIBRARIES} 

target_link_libraries( fgcom iaxclient_lib )
target_link_Libraries( fgcom
    ${win_LIBS}
    ${PLIB_LIBRARIES}
    ${ZLIB_LIBRARIES} )

if(AUDIO_OPENAL)
target_link_Libraries( fgcom
        ${ALUT_LIBRARY} 
        ${OPENAL_LIBRARY} )
endif(AUDIO_OPENAL)

# deal with install 
install(TARGETS fgcom DESTINATION bin )

## NO INSTALL OF HEADERS - this is an EXE
##install(FILES ${fgcom_HEADERS} DESTINATION include )

# end of generated root CMakeLists.txt file for fgcom, by dswlist.pl
